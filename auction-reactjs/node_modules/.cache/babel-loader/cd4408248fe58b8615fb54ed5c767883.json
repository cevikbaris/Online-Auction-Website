{"ast":null,"code":"/*global window */\n\n/**\n * @license countdown.js v2.6.0 http://countdownjs.org\n * Copyright (c)2006-2014 Stephen M. McKamey.\n * Licensed under The MIT License.\n */\n\n/*jshint bitwise:false */\n\n/**\n * @public\n * @type {Object|null}\n */\nvar module;\n/**\n * API entry\n * @public\n * @param {function(Object)|Date|number} start the starting date\n * @param {function(Object)|Date|number} end the ending date\n * @param {number} units the units to populate\n * @return {Object|number}\n */\n\nvar countdown =\n/**\n * @param {Object} module CommonJS Module\n */\nfunction (module) {\n  /*jshint smarttabs:true */\n  'use strict';\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n  var MILLISECONDS = 0x001;\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n  var SECONDS = 0x002;\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n  var MINUTES = 0x004;\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n  var HOURS = 0x008;\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n  var DAYS = 0x010;\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n  var WEEKS = 0x020;\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n  var MONTHS = 0x040;\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n  var YEARS = 0x080;\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n  var DECADES = 0x100;\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n  var CENTURIES = 0x200;\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n  var MILLENNIA = 0x400;\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n  var DEFAULTS = YEARS | MONTHS | DAYS | HOURS | MINUTES | SECONDS;\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n  var MILLISECONDS_PER_SECOND = 1000;\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n  var SECONDS_PER_MINUTE = 60;\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n  var MINUTES_PER_HOUR = 60;\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n  var HOURS_PER_DAY = 24;\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n  var MILLISECONDS_PER_DAY = HOURS_PER_DAY * MINUTES_PER_HOUR * SECONDS_PER_MINUTE * MILLISECONDS_PER_SECOND;\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n  var DAYS_PER_WEEK = 7;\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n  var MONTHS_PER_YEAR = 12;\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n  var YEARS_PER_DECADE = 10;\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n  var DECADES_PER_CENTURY = 10;\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n  var CENTURIES_PER_MILLENNIUM = 10;\n  /**\n   * @private\n   * @param {number} x number\n   * @return {number}\n   */\n\n  var ceil = Math.ceil;\n  /**\n   * @private\n   * @param {number} x number\n   * @return {number}\n   */\n\n  var floor = Math.floor;\n  /**\n   * @private\n   * @param {Date} ref reference date\n   * @param {number} shift number of months to shift\n   * @return {number} number of days shifted\n   */\n\n  function borrowMonths(ref, shift) {\n    var prevTime = ref.getTime(); // increment month by shift\n\n    ref.setMonth(ref.getMonth() + shift); // this is the trickiest since months vary in length\n\n    return Math.round((ref.getTime() - prevTime) / MILLISECONDS_PER_DAY);\n  }\n  /**\n   * @private\n   * @param {Date} ref reference date\n   * @return {number} number of days\n   */\n\n\n  function daysPerMonth(ref) {\n    var a = ref.getTime(); // increment month by 1\n\n    var b = new Date(a);\n    b.setMonth(ref.getMonth() + 1); // this is the trickiest since months vary in length\n\n    return Math.round((b.getTime() - a) / MILLISECONDS_PER_DAY);\n  }\n  /**\n   * @private\n   * @param {Date} ref reference date\n   * @return {number} number of days\n   */\n\n\n  function daysPerYear(ref) {\n    var a = ref.getTime(); // increment year by 1\n\n    var b = new Date(a);\n    b.setFullYear(ref.getFullYear() + 1); // this is the trickiest since years (periodically) vary in length\n\n    return Math.round((b.getTime() - a) / MILLISECONDS_PER_DAY);\n  }\n  /**\n   * Applies the Timespan to the given date.\n   * \n   * @private\n   * @param {Timespan} ts\n   * @param {Date=} date\n   * @return {Date}\n   */\n\n\n  function addToDate(ts, date) {\n    date = date instanceof Date || date !== null && isFinite(date) ? new Date(+date) : new Date();\n\n    if (!ts) {\n      return date;\n    } // if there is a value field, use it directly\n\n\n    var value = +ts.value || 0;\n\n    if (value) {\n      date.setTime(date.getTime() + value);\n      return date;\n    }\n\n    value = +ts.milliseconds || 0;\n\n    if (value) {\n      date.setMilliseconds(date.getMilliseconds() + value);\n    }\n\n    value = +ts.seconds || 0;\n\n    if (value) {\n      date.setSeconds(date.getSeconds() + value);\n    }\n\n    value = +ts.minutes || 0;\n\n    if (value) {\n      date.setMinutes(date.getMinutes() + value);\n    }\n\n    value = +ts.hours || 0;\n\n    if (value) {\n      date.setHours(date.getHours() + value);\n    }\n\n    value = +ts.weeks || 0;\n\n    if (value) {\n      value *= DAYS_PER_WEEK;\n    }\n\n    value += +ts.days || 0;\n\n    if (value) {\n      date.setDate(date.getDate() + value);\n    }\n\n    value = +ts.months || 0;\n\n    if (value) {\n      date.setMonth(date.getMonth() + value);\n    }\n\n    value = +ts.millennia || 0;\n\n    if (value) {\n      value *= CENTURIES_PER_MILLENNIUM;\n    }\n\n    value += +ts.centuries || 0;\n\n    if (value) {\n      value *= DECADES_PER_CENTURY;\n    }\n\n    value += +ts.decades || 0;\n\n    if (value) {\n      value *= YEARS_PER_DECADE;\n    }\n\n    value += +ts.years || 0;\n\n    if (value) {\n      date.setFullYear(date.getFullYear() + value);\n    }\n\n    return date;\n  }\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n\n  var LABEL_MILLISECONDS = 0;\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n  var LABEL_SECONDS = 1;\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n  var LABEL_MINUTES = 2;\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n  var LABEL_HOURS = 3;\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n  var LABEL_DAYS = 4;\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n  var LABEL_WEEKS = 5;\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n  var LABEL_MONTHS = 6;\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n  var LABEL_YEARS = 7;\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n  var LABEL_DECADES = 8;\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n  var LABEL_CENTURIES = 9;\n  /**\n   * @private\n   * @const\n   * @type {number}\n   */\n\n  var LABEL_MILLENNIA = 10;\n  /**\n   * @private\n   * @type {Array}\n   */\n\n  var LABELS_SINGLUAR;\n  /**\n   * @private\n   * @type {Array}\n   */\n\n  var LABELS_PLURAL;\n  /**\n   * @private\n   * @type {string}\n   */\n\n  var LABEL_LAST;\n  /**\n   * @private\n   * @type {string}\n   */\n\n  var LABEL_DELIM;\n  /**\n   * @private\n   * @type {string}\n   */\n\n  var LABEL_NOW;\n  /**\n   * Formats a number & unit as a string\n   * \n   * @param {number} value\n   * @param {number} unit\n   * @return {string}\n   */\n\n  var formatter;\n  /**\n   * Formats a number as a string\n   * \n   * @private\n   * @param {number} value\n   * @return {string}\n   */\n\n  var formatNumber;\n  /**\n   * @private\n   * @param {number} value\n   * @param {number} unit unit index into label list\n   * @return {string}\n   */\n\n  function plurality(value, unit) {\n    return formatNumber(value) + (value === 1 ? LABELS_SINGLUAR[unit] : LABELS_PLURAL[unit]);\n  }\n  /**\n   * Formats the entries with singular or plural labels\n   * \n   * @private\n   * @param {Timespan} ts\n   * @return {Array}\n   */\n\n\n  var formatList;\n  /**\n   * Timespan representation of a duration of time\n   * \n   * @private\n   * @this {Timespan}\n   * @constructor\n   */\n\n  function Timespan() {}\n  /**\n   * Formats the Timespan as a sentence\n   * \n   * @param {string=} emptyLabel the string to use when no values returned\n   * @return {string}\n   */\n\n\n  Timespan.prototype.toString = function (emptyLabel) {\n    var label = formatList(this);\n    var count = label.length;\n\n    if (!count) {\n      return emptyLabel ? '' + emptyLabel : LABEL_NOW;\n    }\n\n    if (count === 1) {\n      return label[0];\n    }\n\n    var last = LABEL_LAST + label.pop();\n    return label.join(LABEL_DELIM) + last;\n  };\n  /**\n   * Formats the Timespan as a sentence in HTML\n   * \n   * @param {string=} tag HTML tag name to wrap each value\n   * @param {string=} emptyLabel the string to use when no values returned\n   * @return {string}\n   */\n\n\n  Timespan.prototype.toHTML = function (tag, emptyLabel) {\n    tag = tag || 'span';\n    var label = formatList(this);\n    var count = label.length;\n\n    if (!count) {\n      emptyLabel = emptyLabel || LABEL_NOW;\n      return emptyLabel ? '<' + tag + '>' + emptyLabel + '</' + tag + '>' : emptyLabel;\n    }\n\n    for (var i = 0; i < count; i++) {\n      // wrap each unit in tag\n      label[i] = '<' + tag + '>' + label[i] + '</' + tag + '>';\n    }\n\n    if (count === 1) {\n      return label[0];\n    }\n\n    var last = LABEL_LAST + label.pop();\n    return label.join(LABEL_DELIM) + last;\n  };\n  /**\n   * Applies the Timespan to the given date\n   * \n   * @param {Date=} date the date to which the timespan is added.\n   * @return {Date}\n   */\n\n\n  Timespan.prototype.addTo = function (date) {\n    return addToDate(this, date);\n  };\n  /**\n   * Formats the entries as English labels\n   * \n   * @private\n   * @param {Timespan} ts\n   * @return {Array}\n   */\n\n\n  formatList = function (ts) {\n    var list = [];\n    var value = ts.millennia;\n\n    if (value) {\n      list.push(formatter(value, LABEL_MILLENNIA));\n    }\n\n    value = ts.centuries;\n\n    if (value) {\n      list.push(formatter(value, LABEL_CENTURIES));\n    }\n\n    value = ts.decades;\n\n    if (value) {\n      list.push(formatter(value, LABEL_DECADES));\n    }\n\n    value = ts.years;\n\n    if (value) {\n      list.push(formatter(value, LABEL_YEARS));\n    }\n\n    value = ts.months;\n\n    if (value) {\n      list.push(formatter(value, LABEL_MONTHS));\n    }\n\n    value = ts.weeks;\n\n    if (value) {\n      list.push(formatter(value, LABEL_WEEKS));\n    }\n\n    value = ts.days;\n\n    if (value) {\n      list.push(formatter(value, LABEL_DAYS));\n    }\n\n    value = ts.hours;\n\n    if (value) {\n      list.push(formatter(value, LABEL_HOURS));\n    }\n\n    value = ts.minutes;\n\n    if (value) {\n      list.push(formatter(value, LABEL_MINUTES));\n    }\n\n    value = ts.seconds;\n\n    if (value) {\n      list.push(formatter(value, LABEL_SECONDS));\n    }\n\n    value = ts.milliseconds;\n\n    if (value) {\n      list.push(formatter(value, LABEL_MILLISECONDS));\n    }\n\n    return list;\n  };\n  /**\n   * Borrow any underflow units, carry any overflow units\n   * \n   * @private\n   * @param {Timespan} ts\n   * @param {string} toUnit\n   */\n\n\n  function rippleRounded(ts, toUnit) {\n    switch (toUnit) {\n      case 'seconds':\n        if (ts.seconds !== SECONDS_PER_MINUTE || isNaN(ts.minutes)) {\n          return;\n        } // ripple seconds up to minutes\n\n\n        ts.minutes++;\n        ts.seconds = 0;\n\n      /* falls through */\n\n      case 'minutes':\n        if (ts.minutes !== MINUTES_PER_HOUR || isNaN(ts.hours)) {\n          return;\n        } // ripple minutes up to hours\n\n\n        ts.hours++;\n        ts.minutes = 0;\n\n      /* falls through */\n\n      case 'hours':\n        if (ts.hours !== HOURS_PER_DAY || isNaN(ts.days)) {\n          return;\n        } // ripple hours up to days\n\n\n        ts.days++;\n        ts.hours = 0;\n\n      /* falls through */\n\n      case 'days':\n        if (ts.days !== DAYS_PER_WEEK || isNaN(ts.weeks)) {\n          return;\n        } // ripple days up to weeks\n\n\n        ts.weeks++;\n        ts.days = 0;\n\n      /* falls through */\n\n      case 'weeks':\n        if (ts.weeks !== daysPerMonth(ts.refMonth) / DAYS_PER_WEEK || isNaN(ts.months)) {\n          return;\n        } // ripple weeks up to months\n\n\n        ts.months++;\n        ts.weeks = 0;\n\n      /* falls through */\n\n      case 'months':\n        if (ts.months !== MONTHS_PER_YEAR || isNaN(ts.years)) {\n          return;\n        } // ripple months up to years\n\n\n        ts.years++;\n        ts.months = 0;\n\n      /* falls through */\n\n      case 'years':\n        if (ts.years !== YEARS_PER_DECADE || isNaN(ts.decades)) {\n          return;\n        } // ripple years up to decades\n\n\n        ts.decades++;\n        ts.years = 0;\n\n      /* falls through */\n\n      case 'decades':\n        if (ts.decades !== DECADES_PER_CENTURY || isNaN(ts.centuries)) {\n          return;\n        } // ripple decades up to centuries\n\n\n        ts.centuries++;\n        ts.decades = 0;\n\n      /* falls through */\n\n      case 'centuries':\n        if (ts.centuries !== CENTURIES_PER_MILLENNIUM || isNaN(ts.millennia)) {\n          return;\n        } // ripple centuries up to millennia\n\n\n        ts.millennia++;\n        ts.centuries = 0;\n\n      /* falls through */\n    }\n  }\n  /**\n   * Ripple up partial units one place\n   * \n   * @private\n   * @param {Timespan} ts timespan\n   * @param {number} frac accumulated fractional value\n   * @param {string} fromUnit source unit name\n   * @param {string} toUnit target unit name\n   * @param {number} conversion multiplier between units\n   * @param {number} digits max number of decimal digits to output\n   * @return {number} new fractional value\n   */\n\n\n  function fraction(ts, frac, fromUnit, toUnit, conversion, digits) {\n    if (ts[fromUnit] >= 0) {\n      frac += ts[fromUnit];\n      delete ts[fromUnit];\n    }\n\n    frac /= conversion;\n\n    if (frac + 1 <= 1) {\n      // drop if below machine epsilon\n      return 0;\n    }\n\n    if (ts[toUnit] >= 0) {\n      // ensure does not have more than specified number of digits\n      ts[toUnit] = +(ts[toUnit] + frac).toFixed(digits);\n      rippleRounded(ts, toUnit);\n      return 0;\n    }\n\n    return frac;\n  }\n  /**\n   * Ripple up partial units to next existing\n   * \n   * @private\n   * @param {Timespan} ts\n   * @param {number} digits max number of decimal digits to output\n   */\n\n\n  function fractional(ts, digits) {\n    var frac = fraction(ts, 0, 'milliseconds', 'seconds', MILLISECONDS_PER_SECOND, digits);\n\n    if (!frac) {\n      return;\n    }\n\n    frac = fraction(ts, frac, 'seconds', 'minutes', SECONDS_PER_MINUTE, digits);\n\n    if (!frac) {\n      return;\n    }\n\n    frac = fraction(ts, frac, 'minutes', 'hours', MINUTES_PER_HOUR, digits);\n\n    if (!frac) {\n      return;\n    }\n\n    frac = fraction(ts, frac, 'hours', 'days', HOURS_PER_DAY, digits);\n\n    if (!frac) {\n      return;\n    }\n\n    frac = fraction(ts, frac, 'days', 'weeks', DAYS_PER_WEEK, digits);\n\n    if (!frac) {\n      return;\n    }\n\n    frac = fraction(ts, frac, 'weeks', 'months', daysPerMonth(ts.refMonth) / DAYS_PER_WEEK, digits);\n\n    if (!frac) {\n      return;\n    }\n\n    frac = fraction(ts, frac, 'months', 'years', daysPerYear(ts.refMonth) / daysPerMonth(ts.refMonth), digits);\n\n    if (!frac) {\n      return;\n    }\n\n    frac = fraction(ts, frac, 'years', 'decades', YEARS_PER_DECADE, digits);\n\n    if (!frac) {\n      return;\n    }\n\n    frac = fraction(ts, frac, 'decades', 'centuries', DECADES_PER_CENTURY, digits);\n\n    if (!frac) {\n      return;\n    }\n\n    frac = fraction(ts, frac, 'centuries', 'millennia', CENTURIES_PER_MILLENNIUM, digits); // should never reach this with remaining fractional value\n\n    if (frac) {\n      throw new Error('Fractional unit overflow');\n    }\n  }\n  /**\n   * Borrow any underflow units, carry any overflow units\n   * \n   * @private\n   * @param {Timespan} ts\n   */\n\n\n  function ripple(ts) {\n    var x;\n\n    if (ts.milliseconds < 0) {\n      // ripple seconds down to milliseconds\n      x = ceil(-ts.milliseconds / MILLISECONDS_PER_SECOND);\n      ts.seconds -= x;\n      ts.milliseconds += x * MILLISECONDS_PER_SECOND;\n    } else if (ts.milliseconds >= MILLISECONDS_PER_SECOND) {\n      // ripple milliseconds up to seconds\n      ts.seconds += floor(ts.milliseconds / MILLISECONDS_PER_SECOND);\n      ts.milliseconds %= MILLISECONDS_PER_SECOND;\n    }\n\n    if (ts.seconds < 0) {\n      // ripple minutes down to seconds\n      x = ceil(-ts.seconds / SECONDS_PER_MINUTE);\n      ts.minutes -= x;\n      ts.seconds += x * SECONDS_PER_MINUTE;\n    } else if (ts.seconds >= SECONDS_PER_MINUTE) {\n      // ripple seconds up to minutes\n      ts.minutes += floor(ts.seconds / SECONDS_PER_MINUTE);\n      ts.seconds %= SECONDS_PER_MINUTE;\n    }\n\n    if (ts.minutes < 0) {\n      // ripple hours down to minutes\n      x = ceil(-ts.minutes / MINUTES_PER_HOUR);\n      ts.hours -= x;\n      ts.minutes += x * MINUTES_PER_HOUR;\n    } else if (ts.minutes >= MINUTES_PER_HOUR) {\n      // ripple minutes up to hours\n      ts.hours += floor(ts.minutes / MINUTES_PER_HOUR);\n      ts.minutes %= MINUTES_PER_HOUR;\n    }\n\n    if (ts.hours < 0) {\n      // ripple days down to hours\n      x = ceil(-ts.hours / HOURS_PER_DAY);\n      ts.days -= x;\n      ts.hours += x * HOURS_PER_DAY;\n    } else if (ts.hours >= HOURS_PER_DAY) {\n      // ripple hours up to days\n      ts.days += floor(ts.hours / HOURS_PER_DAY);\n      ts.hours %= HOURS_PER_DAY;\n    }\n\n    while (ts.days < 0) {\n      // NOTE: never actually seen this loop more than once\n      // ripple months down to days\n      ts.months--;\n      ts.days += borrowMonths(ts.refMonth, 1);\n    } // weeks is always zero here\n\n\n    if (ts.days >= DAYS_PER_WEEK) {\n      // ripple days up to weeks\n      ts.weeks += floor(ts.days / DAYS_PER_WEEK);\n      ts.days %= DAYS_PER_WEEK;\n    }\n\n    if (ts.months < 0) {\n      // ripple years down to months\n      x = ceil(-ts.months / MONTHS_PER_YEAR);\n      ts.years -= x;\n      ts.months += x * MONTHS_PER_YEAR;\n    } else if (ts.months >= MONTHS_PER_YEAR) {\n      // ripple months up to years\n      ts.years += floor(ts.months / MONTHS_PER_YEAR);\n      ts.months %= MONTHS_PER_YEAR;\n    } // years is always non-negative here\n    // decades, centuries and millennia are always zero here\n\n\n    if (ts.years >= YEARS_PER_DECADE) {\n      // ripple years up to decades\n      ts.decades += floor(ts.years / YEARS_PER_DECADE);\n      ts.years %= YEARS_PER_DECADE;\n\n      if (ts.decades >= DECADES_PER_CENTURY) {\n        // ripple decades up to centuries\n        ts.centuries += floor(ts.decades / DECADES_PER_CENTURY);\n        ts.decades %= DECADES_PER_CENTURY;\n\n        if (ts.centuries >= CENTURIES_PER_MILLENNIUM) {\n          // ripple centuries up to millennia\n          ts.millennia += floor(ts.centuries / CENTURIES_PER_MILLENNIUM);\n          ts.centuries %= CENTURIES_PER_MILLENNIUM;\n        }\n      }\n    }\n  }\n  /**\n   * Remove any units not requested\n   * \n   * @private\n   * @param {Timespan} ts\n   * @param {number} units the units to populate\n   * @param {number} max number of labels to output\n   * @param {number} digits max number of decimal digits to output\n   */\n\n\n  function pruneUnits(ts, units, max, digits) {\n    var count = 0; // Calc from largest unit to smallest to prevent underflow\n\n    if (!(units & MILLENNIA) || count >= max) {\n      // ripple millennia down to centuries\n      ts.centuries += ts.millennia * CENTURIES_PER_MILLENNIUM;\n      delete ts.millennia;\n    } else if (ts.millennia) {\n      count++;\n    }\n\n    if (!(units & CENTURIES) || count >= max) {\n      // ripple centuries down to decades\n      ts.decades += ts.centuries * DECADES_PER_CENTURY;\n      delete ts.centuries;\n    } else if (ts.centuries) {\n      count++;\n    }\n\n    if (!(units & DECADES) || count >= max) {\n      // ripple decades down to years\n      ts.years += ts.decades * YEARS_PER_DECADE;\n      delete ts.decades;\n    } else if (ts.decades) {\n      count++;\n    }\n\n    if (!(units & YEARS) || count >= max) {\n      // ripple years down to months\n      ts.months += ts.years * MONTHS_PER_YEAR;\n      delete ts.years;\n    } else if (ts.years) {\n      count++;\n    }\n\n    if (!(units & MONTHS) || count >= max) {\n      // ripple months down to days\n      if (ts.months) {\n        ts.days += borrowMonths(ts.refMonth, ts.months);\n      }\n\n      delete ts.months;\n\n      if (ts.days >= DAYS_PER_WEEK) {\n        // ripple day overflow back up to weeks\n        ts.weeks += floor(ts.days / DAYS_PER_WEEK);\n        ts.days %= DAYS_PER_WEEK;\n      }\n    } else if (ts.months) {\n      count++;\n    }\n\n    if (!(units & WEEKS) || count >= max) {\n      // ripple weeks down to days\n      ts.days += ts.weeks * DAYS_PER_WEEK;\n      delete ts.weeks;\n    } else if (ts.weeks) {\n      count++;\n    }\n\n    if (!(units & DAYS) || count >= max) {\n      //ripple days down to hours\n      ts.hours += ts.days * HOURS_PER_DAY;\n      delete ts.days;\n    } else if (ts.days) {\n      count++;\n    }\n\n    if (!(units & HOURS) || count >= max) {\n      // ripple hours down to minutes\n      ts.minutes += ts.hours * MINUTES_PER_HOUR;\n      delete ts.hours;\n    } else if (ts.hours) {\n      count++;\n    }\n\n    if (!(units & MINUTES) || count >= max) {\n      // ripple minutes down to seconds\n      ts.seconds += ts.minutes * SECONDS_PER_MINUTE;\n      delete ts.minutes;\n    } else if (ts.minutes) {\n      count++;\n    }\n\n    if (!(units & SECONDS) || count >= max) {\n      // ripple seconds down to milliseconds\n      ts.milliseconds += ts.seconds * MILLISECONDS_PER_SECOND;\n      delete ts.seconds;\n    } else if (ts.seconds) {\n      count++;\n    } // nothing to ripple milliseconds down to\n    // so ripple back up to smallest existing unit as a fractional value\n\n\n    if (!(units & MILLISECONDS) || count >= max) {\n      fractional(ts, digits);\n    }\n  }\n  /**\n   * Populates the Timespan object\n   * \n   * @private\n   * @param {Timespan} ts\n   * @param {?Date} start the starting date\n   * @param {?Date} end the ending date\n   * @param {number} units the units to populate\n   * @param {number} max number of labels to output\n   * @param {number} digits max number of decimal digits to output\n   */\n\n\n  function populate(ts, start, end, units, max, digits) {\n    var now = new Date();\n    ts.start = start = start || now;\n    ts.end = end = end || now;\n    ts.units = units;\n    ts.value = end.getTime() - start.getTime();\n\n    if (ts.value < 0) {\n      // swap if reversed\n      var tmp = end;\n      end = start;\n      start = tmp;\n    } // reference month for determining days in month\n\n\n    ts.refMonth = new Date(start.getFullYear(), start.getMonth(), 15, 12, 0, 0);\n\n    try {\n      // reset to initial deltas\n      ts.millennia = 0;\n      ts.centuries = 0;\n      ts.decades = 0;\n      ts.years = end.getFullYear() - start.getFullYear();\n      ts.months = end.getMonth() - start.getMonth();\n      ts.weeks = 0;\n      ts.days = end.getDate() - start.getDate();\n      ts.hours = end.getHours() - start.getHours();\n      ts.minutes = end.getMinutes() - start.getMinutes();\n      ts.seconds = end.getSeconds() - start.getSeconds();\n      ts.milliseconds = end.getMilliseconds() - start.getMilliseconds();\n      ripple(ts);\n      pruneUnits(ts, units, max, digits);\n    } finally {\n      delete ts.refMonth;\n    }\n\n    return ts;\n  }\n  /**\n   * Determine an appropriate refresh rate based upon units\n   * \n   * @private\n   * @param {number} units the units to populate\n   * @return {number} milliseconds to delay\n   */\n\n\n  function getDelay(units) {\n    if (units & MILLISECONDS) {\n      // refresh very quickly\n      return MILLISECONDS_PER_SECOND / 30; //30Hz\n    }\n\n    if (units & SECONDS) {\n      // refresh every second\n      return MILLISECONDS_PER_SECOND; //1Hz\n    }\n\n    if (units & MINUTES) {\n      // refresh every minute\n      return MILLISECONDS_PER_SECOND * SECONDS_PER_MINUTE;\n    }\n\n    if (units & HOURS) {\n      // refresh hourly\n      return MILLISECONDS_PER_SECOND * SECONDS_PER_MINUTE * MINUTES_PER_HOUR;\n    }\n\n    if (units & DAYS) {\n      // refresh daily\n      return MILLISECONDS_PER_SECOND * SECONDS_PER_MINUTE * MINUTES_PER_HOUR * HOURS_PER_DAY;\n    } // refresh the rest weekly\n\n\n    return MILLISECONDS_PER_SECOND * SECONDS_PER_MINUTE * MINUTES_PER_HOUR * HOURS_PER_DAY * DAYS_PER_WEEK;\n  }\n  /**\n   * API entry point\n   * \n   * @public\n   * @param {Date|number|Timespan|null|function(Timespan,number)} start the starting date\n   * @param {Date|number|Timespan|null|function(Timespan,number)} end the ending date\n   * @param {number=} units the units to populate\n   * @param {number=} max number of labels to output\n   * @param {number=} digits max number of decimal digits to output\n   * @return {Timespan|number}\n   */\n\n\n  function countdown(start, end, units, max, digits) {\n    var callback; // ensure some units or use defaults\n\n    units = +units || DEFAULTS; // max must be positive\n\n    max = max > 0 ? max : NaN; // clamp digits to an integer between [0, 20]\n\n    digits = digits > 0 ? digits < 20 ? Math.round(digits) : 20 : 0; // ensure start date\n\n    var startTS = null;\n\n    if ('function' === typeof start) {\n      callback = start;\n      start = null;\n    } else if (!(start instanceof Date)) {\n      if (start !== null && isFinite(start)) {\n        start = new Date(+start);\n      } else {\n        if ('object' === typeof startTS) {\n          startTS =\n          /** @type{Timespan} */\n          start;\n        }\n\n        start = null;\n      }\n    } // ensure end date\n\n\n    var endTS = null;\n\n    if ('function' === typeof end) {\n      callback = end;\n      end = null;\n    } else if (!(end instanceof Date)) {\n      if (end !== null && isFinite(end)) {\n        end = new Date(+end);\n      } else {\n        if ('object' === typeof end) {\n          endTS =\n          /** @type{Timespan} */\n          end;\n        }\n\n        end = null;\n      }\n    } // must wait to interpret timespans until after resolving dates\n\n\n    if (startTS) {\n      start = addToDate(startTS, end);\n    }\n\n    if (endTS) {\n      end = addToDate(endTS, start);\n    }\n\n    if (!start && !end) {\n      // used for unit testing\n      return new Timespan();\n    }\n\n    if (!callback) {\n      return populate(new Timespan(),\n      /** @type{Date} */\n      start,\n      /** @type{Date} */\n      end,\n      /** @type{number} */\n      units,\n      /** @type{number} */\n      max,\n      /** @type{number} */\n      digits);\n    } // base delay off units\n\n\n    var delay = getDelay(units),\n        timerId,\n        fn = function () {\n      callback(populate(new Timespan(),\n      /** @type{Date} */\n      start,\n      /** @type{Date} */\n      end,\n      /** @type{number} */\n      units,\n      /** @type{number} */\n      max,\n      /** @type{number} */\n      digits), timerId);\n    };\n\n    fn();\n    return timerId = setInterval(fn, delay);\n  }\n  /**\n   * @public\n   * @const\n   * @type {number}\n   */\n\n\n  countdown.MILLISECONDS = MILLISECONDS;\n  /**\n   * @public\n   * @const\n   * @type {number}\n   */\n\n  countdown.SECONDS = SECONDS;\n  /**\n   * @public\n   * @const\n   * @type {number}\n   */\n\n  countdown.MINUTES = MINUTES;\n  /**\n   * @public\n   * @const\n   * @type {number}\n   */\n\n  countdown.HOURS = HOURS;\n  /**\n   * @public\n   * @const\n   * @type {number}\n   */\n\n  countdown.DAYS = DAYS;\n  /**\n   * @public\n   * @const\n   * @type {number}\n   */\n\n  countdown.WEEKS = WEEKS;\n  /**\n   * @public\n   * @const\n   * @type {number}\n   */\n\n  countdown.MONTHS = MONTHS;\n  /**\n   * @public\n   * @const\n   * @type {number}\n   */\n\n  countdown.YEARS = YEARS;\n  /**\n   * @public\n   * @const\n   * @type {number}\n   */\n\n  countdown.DECADES = DECADES;\n  /**\n   * @public\n   * @const\n   * @type {number}\n   */\n\n  countdown.CENTURIES = CENTURIES;\n  /**\n   * @public\n   * @const\n   * @type {number}\n   */\n\n  countdown.MILLENNIA = MILLENNIA;\n  /**\n   * @public\n   * @const\n   * @type {number}\n   */\n\n  countdown.DEFAULTS = DEFAULTS;\n  /**\n   * @public\n   * @const\n   * @type {number}\n   */\n\n  countdown.ALL = MILLENNIA | CENTURIES | DECADES | YEARS | MONTHS | WEEKS | DAYS | HOURS | MINUTES | SECONDS | MILLISECONDS;\n  /**\n   * Customize the format settings.\n   * @public\n   * @param {Object} format settings object\n   */\n\n  var setFormat = countdown.setFormat = function (format) {\n    if (!format) {\n      return;\n    }\n\n    if ('singular' in format || 'plural' in format) {\n      var singular = format.singular || [];\n\n      if (singular.split) {\n        singular = singular.split('|');\n      }\n\n      var plural = format.plural || [];\n\n      if (plural.split) {\n        plural = plural.split('|');\n      }\n\n      for (var i = LABEL_MILLISECONDS; i <= LABEL_MILLENNIA; i++) {\n        // override any specified units\n        LABELS_SINGLUAR[i] = singular[i] || LABELS_SINGLUAR[i];\n        LABELS_PLURAL[i] = plural[i] || LABELS_PLURAL[i];\n      }\n    }\n\n    if ('string' === typeof format.last) {\n      LABEL_LAST = format.last;\n    }\n\n    if ('string' === typeof format.delim) {\n      LABEL_DELIM = format.delim;\n    }\n\n    if ('string' === typeof format.empty) {\n      LABEL_NOW = format.empty;\n    }\n\n    if ('function' === typeof format.formatNumber) {\n      formatNumber = format.formatNumber;\n    }\n\n    if ('function' === typeof format.formatter) {\n      formatter = format.formatter;\n    }\n  };\n  /**\n   * Revert to the default formatting.\n   * @public\n   */\n\n\n  var resetFormat = countdown.resetFormat = function () {\n    LABELS_SINGLUAR = ' millisecond| second| minute| hour| day| week| month| year| decade| century| millennium'.split('|');\n    LABELS_PLURAL = ' milliseconds| seconds| minutes| hours| days| weeks| months| years| decades| centuries| millennia'.split('|');\n    LABEL_LAST = ' and ';\n    LABEL_DELIM = ', ';\n    LABEL_NOW = '';\n\n    formatNumber = function (value) {\n      return value;\n    };\n\n    formatter = plurality;\n  };\n  /**\n   * Override the unit labels.\n   * @public\n   * @param {string|Array=} singular a pipe ('|') delimited list of singular unit name overrides\n   * @param {string|Array=} plural a pipe ('|') delimited list of plural unit name overrides\n   * @param {string=} last a delimiter before the last unit (default: ' and ')\n   * @param {string=} delim a delimiter to use between all other units (default: ', ')\n   * @param {string=} empty a label to use when all units are zero (default: '')\n   * @param {function(number):string=} formatNumber a function which formats numbers as a string\n   * @param {function(number,number):string=} formatter a function which formats a number/unit pair as a string\n   * @deprecated since version 2.6.0\n   */\n\n\n  countdown.setLabels = function (singular, plural, last, delim, empty, formatNumber, formatter) {\n    setFormat({\n      singular: singular,\n      plural: plural,\n      last: last,\n      delim: delim,\n      empty: empty,\n      formatNumber: formatNumber,\n      formatter: formatter\n    });\n  };\n  /**\n   * Revert to the default unit labels.\n   * @public\n   * @deprecated since version 2.6.0\n   */\n\n\n  countdown.resetLabels = resetFormat;\n  resetFormat();\n\n  if (module && module.exports) {\n    module.exports = countdown;\n  } else if (typeof window.define === 'function' && typeof window.define.amd !== 'undefined') {\n    window.define('countdown', [], function () {\n      return countdown;\n    });\n  }\n\n  return countdown;\n}(module);","map":{"version":3,"names":["module","countdown","MILLISECONDS","SECONDS","MINUTES","HOURS","DAYS","WEEKS","MONTHS","YEARS","DECADES","CENTURIES","MILLENNIA","DEFAULTS","MILLISECONDS_PER_SECOND","SECONDS_PER_MINUTE","MINUTES_PER_HOUR","HOURS_PER_DAY","MILLISECONDS_PER_DAY","DAYS_PER_WEEK","MONTHS_PER_YEAR","YEARS_PER_DECADE","DECADES_PER_CENTURY","CENTURIES_PER_MILLENNIUM","ceil","Math","floor","borrowMonths","ref","shift","prevTime","getTime","setMonth","getMonth","round","daysPerMonth","a","b","Date","daysPerYear","setFullYear","getFullYear","addToDate","ts","date","isFinite","value","setTime","milliseconds","setMilliseconds","getMilliseconds","seconds","setSeconds","getSeconds","minutes","setMinutes","getMinutes","hours","setHours","getHours","weeks","days","setDate","getDate","months","millennia","centuries","decades","years","LABEL_MILLISECONDS","LABEL_SECONDS","LABEL_MINUTES","LABEL_HOURS","LABEL_DAYS","LABEL_WEEKS","LABEL_MONTHS","LABEL_YEARS","LABEL_DECADES","LABEL_CENTURIES","LABEL_MILLENNIA","LABELS_SINGLUAR","LABELS_PLURAL","LABEL_LAST","LABEL_DELIM","LABEL_NOW","formatter","formatNumber","plurality","unit","formatList","Timespan","prototype","toString","emptyLabel","label","count","length","last","pop","join","toHTML","tag","i","addTo","list","push","rippleRounded","toUnit","isNaN","refMonth","fraction","frac","fromUnit","conversion","digits","toFixed","fractional","Error","ripple","x","pruneUnits","units","max","populate","start","end","now","tmp","getDelay","callback","NaN","startTS","endTS","delay","timerId","fn","setInterval","ALL","setFormat","format","singular","split","plural","delim","empty","resetFormat","setLabels","resetLabels","exports","window","define","amd"],"sources":["C:/Users/bar1s/Desktop/react/auction/src/Shared/countdown.js"],"sourcesContent":["/*global window */\n/**\n * @license countdown.js v2.6.0 http://countdownjs.org\n * Copyright (c)2006-2014 Stephen M. McKamey.\n * Licensed under The MIT License.\n */\n/*jshint bitwise:false */\n\n/**\n * @public\n * @type {Object|null}\n */\nvar module;\n\n/**\n * API entry\n * @public\n * @param {function(Object)|Date|number} start the starting date\n * @param {function(Object)|Date|number} end the ending date\n * @param {number} units the units to populate\n * @return {Object|number}\n */\nvar countdown = (\n\n/**\n * @param {Object} module CommonJS Module\n */\nfunction(module) {\n\t/*jshint smarttabs:true */\n\n\t'use strict';\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar MILLISECONDS\t= 0x001;\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar SECONDS\t\t\t= 0x002;\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar MINUTES\t\t\t= 0x004;\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar HOURS\t\t\t= 0x008;\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar DAYS\t\t\t= 0x010;\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar WEEKS\t\t\t= 0x020;\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar MONTHS\t\t\t= 0x040;\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar YEARS\t\t\t= 0x080;\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar DECADES\t\t\t= 0x100;\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar CENTURIES\t\t= 0x200;\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar MILLENNIA\t\t= 0x400;\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar DEFAULTS\t\t= YEARS|MONTHS|DAYS|HOURS|MINUTES|SECONDS;\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar MILLISECONDS_PER_SECOND = 1000;\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar SECONDS_PER_MINUTE = 60;\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar MINUTES_PER_HOUR = 60;\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar HOURS_PER_DAY = 24;\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar MILLISECONDS_PER_DAY = HOURS_PER_DAY * MINUTES_PER_HOUR * SECONDS_PER_MINUTE * MILLISECONDS_PER_SECOND;\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar DAYS_PER_WEEK = 7;\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar MONTHS_PER_YEAR = 12;\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar YEARS_PER_DECADE = 10;\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar DECADES_PER_CENTURY = 10;\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar CENTURIES_PER_MILLENNIUM = 10;\n\n\t/**\n\t * @private\n\t * @param {number} x number\n\t * @return {number}\n\t */\n\tvar ceil = Math.ceil;\n\n\t/**\n\t * @private\n\t * @param {number} x number\n\t * @return {number}\n\t */\n\tvar floor = Math.floor;\n\n\t/**\n\t * @private\n\t * @param {Date} ref reference date\n\t * @param {number} shift number of months to shift\n\t * @return {number} number of days shifted\n\t */\n\tfunction borrowMonths(ref, shift) {\n\t\tvar prevTime = ref.getTime();\n\n\t\t// increment month by shift\n\t\tref.setMonth( ref.getMonth() + shift );\n\n\t\t// this is the trickiest since months vary in length\n\t\treturn Math.round( (ref.getTime() - prevTime) / MILLISECONDS_PER_DAY );\n\t}\n\n\t/**\n\t * @private\n\t * @param {Date} ref reference date\n\t * @return {number} number of days\n\t */\n\tfunction daysPerMonth(ref) {\n\t\tvar a = ref.getTime();\n\n\t\t// increment month by 1\n\t\tvar b = new Date(a);\n\t\tb.setMonth( ref.getMonth() + 1 );\n\n\t\t// this is the trickiest since months vary in length\n\t\treturn Math.round( (b.getTime() - a) / MILLISECONDS_PER_DAY );\n\t}\n\n\t/**\n\t * @private\n\t * @param {Date} ref reference date\n\t * @return {number} number of days\n\t */\n\tfunction daysPerYear(ref) {\n\t\tvar a = ref.getTime();\n\n\t\t// increment year by 1\n\t\tvar b = new Date(a);\n\t\tb.setFullYear( ref.getFullYear() + 1 );\n\n\t\t// this is the trickiest since years (periodically) vary in length\n\t\treturn Math.round( (b.getTime() - a) / MILLISECONDS_PER_DAY );\n\t}\n\n\t/**\n\t * Applies the Timespan to the given date.\n\t * \n\t * @private\n\t * @param {Timespan} ts\n\t * @param {Date=} date\n\t * @return {Date}\n\t */\n\tfunction addToDate(ts, date) {\n\t\tdate = (date instanceof Date) || ((date !== null) && isFinite(date)) ? new Date(+date) : new Date();\n\t\tif (!ts) {\n\t\t\treturn date;\n\t\t}\n\n\t\t// if there is a value field, use it directly\n\t\tvar value = +ts.value || 0;\n\t\tif (value) {\n\t\t\tdate.setTime(date.getTime() + value);\n\t\t\treturn date;\n\t\t}\n\n\t\tvalue = +ts.milliseconds || 0;\n\t\tif (value) {\n\t\t\tdate.setMilliseconds(date.getMilliseconds() + value);\n\t\t}\n\n\t\tvalue = +ts.seconds || 0;\n\t\tif (value) {\n\t\t\tdate.setSeconds(date.getSeconds() + value);\n\t\t}\n\n\t\tvalue = +ts.minutes || 0;\n\t\tif (value) {\n\t\t\tdate.setMinutes(date.getMinutes() + value);\n\t\t}\n\n\t\tvalue = +ts.hours || 0;\n\t\tif (value) {\n\t\t\tdate.setHours(date.getHours() + value);\n\t\t}\n\n\t\tvalue = +ts.weeks || 0;\n\t\tif (value) {\n\t\t\tvalue *= DAYS_PER_WEEK;\n\t\t}\n\n\t\tvalue += +ts.days || 0;\n\t\tif (value) {\n\t\t\tdate.setDate(date.getDate() + value);\n\t\t}\n\n\t\tvalue = +ts.months || 0;\n\t\tif (value) {\n\t\t\tdate.setMonth(date.getMonth() + value);\n\t\t}\n\n\t\tvalue = +ts.millennia || 0;\n\t\tif (value) {\n\t\t\tvalue *= CENTURIES_PER_MILLENNIUM;\n\t\t}\n\n\t\tvalue += +ts.centuries || 0;\n\t\tif (value) {\n\t\t\tvalue *= DECADES_PER_CENTURY;\n\t\t}\n\n\t\tvalue += +ts.decades || 0;\n\t\tif (value) {\n\t\t\tvalue *= YEARS_PER_DECADE;\n\t\t}\n\n\t\tvalue += +ts.years || 0;\n\t\tif (value) {\n\t\t\tdate.setFullYear(date.getFullYear() + value);\n\t\t}\n\n\t\treturn date;\n\t}\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar LABEL_MILLISECONDS\t= 0;\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar LABEL_SECONDS\t\t= 1;\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar LABEL_MINUTES\t\t= 2;\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar LABEL_HOURS\t\t\t= 3;\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar LABEL_DAYS\t\t\t= 4;\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar LABEL_WEEKS\t\t\t= 5;\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar LABEL_MONTHS\t\t= 6;\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar LABEL_YEARS\t\t\t= 7;\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar LABEL_DECADES\t\t= 8;\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar LABEL_CENTURIES\t\t= 9;\n\n\t/**\n\t * @private\n\t * @const\n\t * @type {number}\n\t */\n\tvar LABEL_MILLENNIA\t\t= 10;\n\n\t/**\n\t * @private\n\t * @type {Array}\n\t */\n\tvar LABELS_SINGLUAR;\n\n\t/**\n\t * @private\n\t * @type {Array}\n\t */\n\tvar LABELS_PLURAL;\n\n\t/**\n\t * @private\n\t * @type {string}\n\t */\n\tvar LABEL_LAST;\n\n\t/**\n\t * @private\n\t * @type {string}\n\t */\n\tvar LABEL_DELIM;\n\n\t/**\n\t * @private\n\t * @type {string}\n\t */\n\tvar LABEL_NOW;\n\n\t/**\n\t * Formats a number & unit as a string\n\t * \n\t * @param {number} value\n\t * @param {number} unit\n\t * @return {string}\n\t */\n\tvar formatter;\n\n\t/**\n\t * Formats a number as a string\n\t * \n\t * @private\n\t * @param {number} value\n\t * @return {string}\n\t */\n\tvar formatNumber;\n\n\t/**\n\t * @private\n\t * @param {number} value\n\t * @param {number} unit unit index into label list\n\t * @return {string}\n\t */\n\tfunction plurality(value, unit) {\n\t\treturn formatNumber(value)+((value === 1) ? LABELS_SINGLUAR[unit] : LABELS_PLURAL[unit]);\n\t}\n\n\t/**\n\t * Formats the entries with singular or plural labels\n\t * \n\t * @private\n\t * @param {Timespan} ts\n\t * @return {Array}\n\t */\n\tvar formatList;\n\n\t/**\n\t * Timespan representation of a duration of time\n\t * \n\t * @private\n\t * @this {Timespan}\n\t * @constructor\n\t */\n\tfunction Timespan() {}\n\n\t/**\n\t * Formats the Timespan as a sentence\n\t * \n\t * @param {string=} emptyLabel the string to use when no values returned\n\t * @return {string}\n\t */\n\tTimespan.prototype.toString = function(emptyLabel) {\n\t\tvar label = formatList(this);\n\n\t\tvar count = label.length;\n\t\tif (!count) {\n\t\t\treturn emptyLabel ? ''+emptyLabel : LABEL_NOW;\n\t\t}\n\t\tif (count === 1) {\n\t\t\treturn label[0];\n\t\t}\n\n\t\tvar last = LABEL_LAST+label.pop();\n\t\treturn label.join(LABEL_DELIM)+last;\n\t};\n\n\t/**\n\t * Formats the Timespan as a sentence in HTML\n\t * \n\t * @param {string=} tag HTML tag name to wrap each value\n\t * @param {string=} emptyLabel the string to use when no values returned\n\t * @return {string}\n\t */\n\tTimespan.prototype.toHTML = function(tag, emptyLabel) {\n\t\ttag = tag || 'span';\n\t\tvar label = formatList(this);\n\n\t\tvar count = label.length;\n\t\tif (!count) {\n\t\t\temptyLabel = emptyLabel || LABEL_NOW;\n\t\t\treturn emptyLabel ? '<'+tag+'>'+emptyLabel+'</'+tag+'>' : emptyLabel;\n\t\t}\n\t\tfor (var i=0; i<count; i++) {\n\t\t\t// wrap each unit in tag\n\t\t\tlabel[i] = '<'+tag+'>'+label[i]+'</'+tag+'>';\n\t\t}\n\t\tif (count === 1) {\n\t\t\treturn label[0];\n\t\t}\n\n\t\tvar last = LABEL_LAST+label.pop();\n\t\treturn label.join(LABEL_DELIM)+last;\n\t};\n\n\t/**\n\t * Applies the Timespan to the given date\n\t * \n\t * @param {Date=} date the date to which the timespan is added.\n\t * @return {Date}\n\t */\n\tTimespan.prototype.addTo = function(date) {\n\t\treturn addToDate(this, date);\n\t};\n\n\t/**\n\t * Formats the entries as English labels\n\t * \n\t * @private\n\t * @param {Timespan} ts\n\t * @return {Array}\n\t */\n\tformatList = function(ts) {\n\t\tvar list = [];\n\n\t\tvar value = ts.millennia;\n\t\tif (value) {\n\t\t\tlist.push(formatter(value, LABEL_MILLENNIA));\n\t\t}\n\n\t\tvalue = ts.centuries;\n\t\tif (value) {\n\t\t\tlist.push(formatter(value, LABEL_CENTURIES));\n\t\t}\n\n\t\tvalue = ts.decades;\n\t\tif (value) {\n\t\t\tlist.push(formatter(value, LABEL_DECADES));\n\t\t}\n\n\t\tvalue = ts.years;\n\t\tif (value) {\n\t\t\tlist.push(formatter(value, LABEL_YEARS));\n\t\t}\n\n\t\tvalue = ts.months;\n\t\tif (value) {\n\t\t\tlist.push(formatter(value, LABEL_MONTHS));\n\t\t}\n\n\t\tvalue = ts.weeks;\n\t\tif (value) {\n\t\t\tlist.push(formatter(value, LABEL_WEEKS));\n\t\t}\n\n\t\tvalue = ts.days;\n\t\tif (value) {\n\t\t\tlist.push(formatter(value, LABEL_DAYS));\n\t\t}\n\n\t\tvalue = ts.hours;\n\t\tif (value) {\n\t\t\tlist.push(formatter(value, LABEL_HOURS));\n\t\t}\n\n\t\tvalue = ts.minutes;\n\t\tif (value) {\n\t\t\tlist.push(formatter(value, LABEL_MINUTES));\n\t\t}\n\n\t\tvalue = ts.seconds;\n\t\tif (value) {\n\t\t\tlist.push(formatter(value, LABEL_SECONDS));\n\t\t}\n\n\t\tvalue = ts.milliseconds;\n\t\tif (value) {\n\t\t\tlist.push(formatter(value, LABEL_MILLISECONDS));\n\t\t}\n\n\t\treturn list;\n\t};\n\n\t/**\n\t * Borrow any underflow units, carry any overflow units\n\t * \n\t * @private\n\t * @param {Timespan} ts\n\t * @param {string} toUnit\n\t */\n\tfunction rippleRounded(ts, toUnit) {\n\t\tswitch (toUnit) {\n\t\t\tcase 'seconds':\n\t\t\t\tif (ts.seconds !== SECONDS_PER_MINUTE || isNaN(ts.minutes)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// ripple seconds up to minutes\n\t\t\t\tts.minutes++;\n\t\t\t\tts.seconds = 0;\n\n\t\t\t\t/* falls through */\n\t\t\tcase 'minutes':\n\t\t\t\tif (ts.minutes !== MINUTES_PER_HOUR || isNaN(ts.hours)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// ripple minutes up to hours\n\t\t\t\tts.hours++;\n\t\t\t\tts.minutes = 0;\n\n\t\t\t\t/* falls through */\n\t\t\tcase 'hours':\n\t\t\t\tif (ts.hours !== HOURS_PER_DAY || isNaN(ts.days)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// ripple hours up to days\n\t\t\t\tts.days++;\n\t\t\t\tts.hours = 0;\n\n\t\t\t\t/* falls through */\n\t\t\tcase 'days':\n\t\t\t\tif (ts.days !== DAYS_PER_WEEK || isNaN(ts.weeks)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// ripple days up to weeks\n\t\t\t\tts.weeks++;\n\t\t\t\tts.days = 0;\n\n\t\t\t\t/* falls through */\n\t\t\tcase 'weeks':\n\t\t\t\tif (ts.weeks !== daysPerMonth(ts.refMonth)/DAYS_PER_WEEK || isNaN(ts.months)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// ripple weeks up to months\n\t\t\t\tts.months++;\n\t\t\t\tts.weeks = 0;\n\n\t\t\t\t/* falls through */\n\t\t\tcase 'months':\n\t\t\t\tif (ts.months !== MONTHS_PER_YEAR || isNaN(ts.years)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// ripple months up to years\n\t\t\t\tts.years++;\n\t\t\t\tts.months = 0;\n\n\t\t\t\t/* falls through */\n\t\t\tcase 'years':\n\t\t\t\tif (ts.years !== YEARS_PER_DECADE || isNaN(ts.decades)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// ripple years up to decades\n\t\t\t\tts.decades++;\n\t\t\t\tts.years = 0;\n\n\t\t\t\t/* falls through */\n\t\t\tcase 'decades':\n\t\t\t\tif (ts.decades !== DECADES_PER_CENTURY || isNaN(ts.centuries)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// ripple decades up to centuries\n\t\t\t\tts.centuries++;\n\t\t\t\tts.decades = 0;\n\n\t\t\t\t/* falls through */\n\t\t\tcase 'centuries':\n\t\t\t\tif (ts.centuries !== CENTURIES_PER_MILLENNIUM || isNaN(ts.millennia)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// ripple centuries up to millennia\n\t\t\t\tts.millennia++;\n\t\t\t\tts.centuries = 0;\n\t\t\t\t/* falls through */\n\t\t\t}\n\t}\n\n\t/**\n\t * Ripple up partial units one place\n\t * \n\t * @private\n\t * @param {Timespan} ts timespan\n\t * @param {number} frac accumulated fractional value\n\t * @param {string} fromUnit source unit name\n\t * @param {string} toUnit target unit name\n\t * @param {number} conversion multiplier between units\n\t * @param {number} digits max number of decimal digits to output\n\t * @return {number} new fractional value\n\t */\n\tfunction fraction(ts, frac, fromUnit, toUnit, conversion, digits) {\n\t\tif (ts[fromUnit] >= 0) {\n\t\t\tfrac += ts[fromUnit];\n\t\t\tdelete ts[fromUnit];\n\t\t}\n\n\t\tfrac /= conversion;\n\t\tif (frac + 1 <= 1) {\n\t\t\t// drop if below machine epsilon\n\t\t\treturn 0;\n\t\t}\n\n\t\tif (ts[toUnit] >= 0) {\n\t\t\t// ensure does not have more than specified number of digits\n\t\t\tts[toUnit] = +(ts[toUnit] + frac).toFixed(digits);\n\t\t\trippleRounded(ts, toUnit);\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn frac;\n\t}\n\n\t/**\n\t * Ripple up partial units to next existing\n\t * \n\t * @private\n\t * @param {Timespan} ts\n\t * @param {number} digits max number of decimal digits to output\n\t */\n\tfunction fractional(ts, digits) {\n\t\tvar frac = fraction(ts, 0, 'milliseconds', 'seconds', MILLISECONDS_PER_SECOND, digits);\n\t\tif (!frac) { return; }\n\n\t\tfrac = fraction(ts, frac, 'seconds', 'minutes', SECONDS_PER_MINUTE, digits);\n\t\tif (!frac) { return; }\n\n\t\tfrac = fraction(ts, frac, 'minutes', 'hours', MINUTES_PER_HOUR, digits);\n\t\tif (!frac) { return; }\n\n\t\tfrac = fraction(ts, frac, 'hours', 'days', HOURS_PER_DAY, digits);\n\t\tif (!frac) { return; }\n\n\t\tfrac = fraction(ts, frac, 'days', 'weeks', DAYS_PER_WEEK, digits);\n\t\tif (!frac) { return; }\n\n\t\tfrac = fraction(ts, frac, 'weeks', 'months', daysPerMonth(ts.refMonth)/DAYS_PER_WEEK, digits);\n\t\tif (!frac) { return; }\n\n\t\tfrac = fraction(ts, frac, 'months', 'years', daysPerYear(ts.refMonth)/daysPerMonth(ts.refMonth), digits);\n\t\tif (!frac) { return; }\n\n\t\tfrac = fraction(ts, frac, 'years', 'decades', YEARS_PER_DECADE, digits);\n\t\tif (!frac) { return; }\n\n\t\tfrac = fraction(ts, frac, 'decades', 'centuries', DECADES_PER_CENTURY, digits);\n\t\tif (!frac) { return; }\n\n\t\tfrac = fraction(ts, frac, 'centuries', 'millennia', CENTURIES_PER_MILLENNIUM, digits);\n\n\t\t// should never reach this with remaining fractional value\n\t\tif (frac) { throw new Error('Fractional unit overflow'); }\n\t}\n\n\t/**\n\t * Borrow any underflow units, carry any overflow units\n\t * \n\t * @private\n\t * @param {Timespan} ts\n\t */\n\tfunction ripple(ts) {\n\t\tvar x;\n\n\t\tif (ts.milliseconds < 0) {\n\t\t\t// ripple seconds down to milliseconds\n\t\t\tx = ceil(-ts.milliseconds / MILLISECONDS_PER_SECOND);\n\t\t\tts.seconds -= x;\n\t\t\tts.milliseconds += x * MILLISECONDS_PER_SECOND;\n\n\t\t} else if (ts.milliseconds >= MILLISECONDS_PER_SECOND) {\n\t\t\t// ripple milliseconds up to seconds\n\t\t\tts.seconds += floor(ts.milliseconds / MILLISECONDS_PER_SECOND);\n\t\t\tts.milliseconds %= MILLISECONDS_PER_SECOND;\n\t\t}\n\n\t\tif (ts.seconds < 0) {\n\t\t\t// ripple minutes down to seconds\n\t\t\tx = ceil(-ts.seconds / SECONDS_PER_MINUTE);\n\t\t\tts.minutes -= x;\n\t\t\tts.seconds += x * SECONDS_PER_MINUTE;\n\n\t\t} else if (ts.seconds >= SECONDS_PER_MINUTE) {\n\t\t\t// ripple seconds up to minutes\n\t\t\tts.minutes += floor(ts.seconds / SECONDS_PER_MINUTE);\n\t\t\tts.seconds %= SECONDS_PER_MINUTE;\n\t\t}\n\n\t\tif (ts.minutes < 0) {\n\t\t\t// ripple hours down to minutes\n\t\t\tx = ceil(-ts.minutes / MINUTES_PER_HOUR);\n\t\t\tts.hours -= x;\n\t\t\tts.minutes += x * MINUTES_PER_HOUR;\n\n\t\t} else if (ts.minutes >= MINUTES_PER_HOUR) {\n\t\t\t// ripple minutes up to hours\n\t\t\tts.hours += floor(ts.minutes / MINUTES_PER_HOUR);\n\t\t\tts.minutes %= MINUTES_PER_HOUR;\n\t\t}\n\n\t\tif (ts.hours < 0) {\n\t\t\t// ripple days down to hours\n\t\t\tx = ceil(-ts.hours / HOURS_PER_DAY);\n\t\t\tts.days -= x;\n\t\t\tts.hours += x * HOURS_PER_DAY;\n\n\t\t} else if (ts.hours >= HOURS_PER_DAY) {\n\t\t\t// ripple hours up to days\n\t\t\tts.days += floor(ts.hours / HOURS_PER_DAY);\n\t\t\tts.hours %= HOURS_PER_DAY;\n\t\t}\n\n\t\twhile (ts.days < 0) {\n\t\t\t// NOTE: never actually seen this loop more than once\n\n\t\t\t// ripple months down to days\n\t\t\tts.months--;\n\t\t\tts.days += borrowMonths(ts.refMonth, 1);\n\t\t}\n\n\t\t// weeks is always zero here\n\n\t\tif (ts.days >= DAYS_PER_WEEK) {\n\t\t\t// ripple days up to weeks\n\t\t\tts.weeks += floor(ts.days / DAYS_PER_WEEK);\n\t\t\tts.days %= DAYS_PER_WEEK;\n\t\t}\n\n\t\tif (ts.months < 0) {\n\t\t\t// ripple years down to months\n\t\t\tx = ceil(-ts.months / MONTHS_PER_YEAR);\n\t\t\tts.years -= x;\n\t\t\tts.months += x * MONTHS_PER_YEAR;\n\n\t\t} else if (ts.months >= MONTHS_PER_YEAR) {\n\t\t\t// ripple months up to years\n\t\t\tts.years += floor(ts.months / MONTHS_PER_YEAR);\n\t\t\tts.months %= MONTHS_PER_YEAR;\n\t\t}\n\n\t\t// years is always non-negative here\n\t\t// decades, centuries and millennia are always zero here\n\n\t\tif (ts.years >= YEARS_PER_DECADE) {\n\t\t\t// ripple years up to decades\n\t\t\tts.decades += floor(ts.years / YEARS_PER_DECADE);\n\t\t\tts.years %= YEARS_PER_DECADE;\n\n\t\t\tif (ts.decades >= DECADES_PER_CENTURY) {\n\t\t\t\t// ripple decades up to centuries\n\t\t\t\tts.centuries += floor(ts.decades / DECADES_PER_CENTURY);\n\t\t\t\tts.decades %= DECADES_PER_CENTURY;\n\n\t\t\t\tif (ts.centuries >= CENTURIES_PER_MILLENNIUM) {\n\t\t\t\t\t// ripple centuries up to millennia\n\t\t\t\t\tts.millennia += floor(ts.centuries / CENTURIES_PER_MILLENNIUM);\n\t\t\t\t\tts.centuries %= CENTURIES_PER_MILLENNIUM;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Remove any units not requested\n\t * \n\t * @private\n\t * @param {Timespan} ts\n\t * @param {number} units the units to populate\n\t * @param {number} max number of labels to output\n\t * @param {number} digits max number of decimal digits to output\n\t */\n\tfunction pruneUnits(ts, units, max, digits) {\n\t\tvar count = 0;\n\n\t\t// Calc from largest unit to smallest to prevent underflow\n\t\tif (!(units & MILLENNIA) || (count >= max)) {\n\t\t\t// ripple millennia down to centuries\n\t\t\tts.centuries += ts.millennia * CENTURIES_PER_MILLENNIUM;\n\t\t\tdelete ts.millennia;\n\n\t\t} else if (ts.millennia) {\n\t\t\tcount++;\n\t\t}\n\n\t\tif (!(units & CENTURIES) || (count >= max)) {\n\t\t\t// ripple centuries down to decades\n\t\t\tts.decades += ts.centuries * DECADES_PER_CENTURY;\n\t\t\tdelete ts.centuries;\n\n\t\t} else if (ts.centuries) {\n\t\t\tcount++;\n\t\t}\n\n\t\tif (!(units & DECADES) || (count >= max)) {\n\t\t\t// ripple decades down to years\n\t\t\tts.years += ts.decades * YEARS_PER_DECADE;\n\t\t\tdelete ts.decades;\n\n\t\t} else if (ts.decades) {\n\t\t\tcount++;\n\t\t}\n\n\t\tif (!(units & YEARS) || (count >= max)) {\n\t\t\t// ripple years down to months\n\t\t\tts.months += ts.years * MONTHS_PER_YEAR;\n\t\t\tdelete ts.years;\n\n\t\t} else if (ts.years) {\n\t\t\tcount++;\n\t\t}\n\n\t\tif (!(units & MONTHS) || (count >= max)) {\n\t\t\t// ripple months down to days\n\t\t\tif (ts.months) {\n\t\t\t\tts.days += borrowMonths(ts.refMonth, ts.months);\n\t\t\t}\n\t\t\tdelete ts.months;\n\n\t\t\tif (ts.days >= DAYS_PER_WEEK) {\n\t\t\t\t// ripple day overflow back up to weeks\n\t\t\t\tts.weeks += floor(ts.days / DAYS_PER_WEEK);\n\t\t\t\tts.days %= DAYS_PER_WEEK;\n\t\t\t}\n\n\t\t} else if (ts.months) {\n\t\t\tcount++;\n\t\t}\n\n\t\tif (!(units & WEEKS) || (count >= max)) {\n\t\t\t// ripple weeks down to days\n\t\t\tts.days += ts.weeks * DAYS_PER_WEEK;\n\t\t\tdelete ts.weeks;\n\n\t\t} else if (ts.weeks) {\n\t\t\tcount++;\n\t\t}\n\n\t\tif (!(units & DAYS) || (count >= max)) {\n\t\t\t//ripple days down to hours\n\t\t\tts.hours += ts.days * HOURS_PER_DAY;\n\t\t\tdelete ts.days;\n\n\t\t} else if (ts.days) {\n\t\t\tcount++;\n\t\t}\n\n\t\tif (!(units & HOURS) || (count >= max)) {\n\t\t\t// ripple hours down to minutes\n\t\t\tts.minutes += ts.hours * MINUTES_PER_HOUR;\n\t\t\tdelete ts.hours;\n\n\t\t} else if (ts.hours) {\n\t\t\tcount++;\n\t\t}\n\n\t\tif (!(units & MINUTES) || (count >= max)) {\n\t\t\t// ripple minutes down to seconds\n\t\t\tts.seconds += ts.minutes * SECONDS_PER_MINUTE;\n\t\t\tdelete ts.minutes;\n\n\t\t} else if (ts.minutes) {\n\t\t\tcount++;\n\t\t}\n\n\t\tif (!(units & SECONDS) || (count >= max)) {\n\t\t\t// ripple seconds down to milliseconds\n\t\t\tts.milliseconds += ts.seconds * MILLISECONDS_PER_SECOND;\n\t\t\tdelete ts.seconds;\n\n\t\t} else if (ts.seconds) {\n\t\t\tcount++;\n\t\t}\n\n\t\t// nothing to ripple milliseconds down to\n\t\t// so ripple back up to smallest existing unit as a fractional value\n\t\tif (!(units & MILLISECONDS) || (count >= max)) {\n\t\t\tfractional(ts, digits);\n\t\t}\n\t}\n\n\t/**\n\t * Populates the Timespan object\n\t * \n\t * @private\n\t * @param {Timespan} ts\n\t * @param {?Date} start the starting date\n\t * @param {?Date} end the ending date\n\t * @param {number} units the units to populate\n\t * @param {number} max number of labels to output\n\t * @param {number} digits max number of decimal digits to output\n\t */\n\tfunction populate(ts, start, end, units, max, digits) {\n\t\tvar now = new Date();\n\n\t\tts.start = start = start || now;\n\t\tts.end = end = end || now;\n\t\tts.units = units;\n\n\t\tts.value = end.getTime() - start.getTime();\n\t\tif (ts.value < 0) {\n\t\t\t// swap if reversed\n\t\t\tvar tmp = end;\n\t\t\tend = start;\n\t\t\tstart = tmp;\n\t\t}\n\n\t\t// reference month for determining days in month\n\t\tts.refMonth = new Date(start.getFullYear(), start.getMonth(), 15, 12, 0, 0);\n\t\ttry {\n\t\t\t// reset to initial deltas\n\t\t\tts.millennia = 0;\n\t\t\tts.centuries = 0;\n\t\t\tts.decades = 0;\n\t\t\tts.years = end.getFullYear() - start.getFullYear();\n\t\t\tts.months = end.getMonth() - start.getMonth();\n\t\t\tts.weeks = 0;\n\t\t\tts.days = end.getDate() - start.getDate();\n\t\t\tts.hours = end.getHours() - start.getHours();\n\t\t\tts.minutes = end.getMinutes() - start.getMinutes();\n\t\t\tts.seconds = end.getSeconds() - start.getSeconds();\n\t\t\tts.milliseconds = end.getMilliseconds() - start.getMilliseconds();\n\n\t\t\tripple(ts);\n\t\t\tpruneUnits(ts, units, max, digits);\n\n\t\t} finally {\n\t\t\tdelete ts.refMonth;\n\t\t}\n\n\t\treturn ts;\n\t}\n\n\t/**\n\t * Determine an appropriate refresh rate based upon units\n\t * \n\t * @private\n\t * @param {number} units the units to populate\n\t * @return {number} milliseconds to delay\n\t */\n\tfunction getDelay(units) {\n\t\tif (units & MILLISECONDS) {\n\t\t\t// refresh very quickly\n\t\t\treturn MILLISECONDS_PER_SECOND / 30; //30Hz\n\t\t}\n\n\t\tif (units & SECONDS) {\n\t\t\t// refresh every second\n\t\t\treturn MILLISECONDS_PER_SECOND; //1Hz\n\t\t}\n\n\t\tif (units & MINUTES) {\n\t\t\t// refresh every minute\n\t\t\treturn MILLISECONDS_PER_SECOND * SECONDS_PER_MINUTE;\n\t\t}\n\n\t\tif (units & HOURS) {\n\t\t\t// refresh hourly\n\t\t\treturn MILLISECONDS_PER_SECOND * SECONDS_PER_MINUTE * MINUTES_PER_HOUR;\n\t\t}\n\t\t\n\t\tif (units & DAYS) {\n\t\t\t// refresh daily\n\t\t\treturn MILLISECONDS_PER_SECOND * SECONDS_PER_MINUTE * MINUTES_PER_HOUR * HOURS_PER_DAY;\n\t\t}\n\n\t\t// refresh the rest weekly\n\t\treturn MILLISECONDS_PER_SECOND * SECONDS_PER_MINUTE * MINUTES_PER_HOUR * HOURS_PER_DAY * DAYS_PER_WEEK;\n\t}\n\n\t/**\n\t * API entry point\n\t * \n\t * @public\n\t * @param {Date|number|Timespan|null|function(Timespan,number)} start the starting date\n\t * @param {Date|number|Timespan|null|function(Timespan,number)} end the ending date\n\t * @param {number=} units the units to populate\n\t * @param {number=} max number of labels to output\n\t * @param {number=} digits max number of decimal digits to output\n\t * @return {Timespan|number}\n\t */\n\tfunction countdown(start, end, units, max, digits) {\n\t\tvar callback;\n\n\t\t// ensure some units or use defaults\n\t\tunits = +units || DEFAULTS;\n\t\t// max must be positive\n\t\tmax = (max > 0) ? max : NaN;\n\t\t// clamp digits to an integer between [0, 20]\n\t\tdigits = (digits > 0) ? (digits < 20) ? Math.round(digits) : 20 : 0;\n\n\t\t// ensure start date\n\t\tvar startTS = null;\n\t\tif ('function' === typeof start) {\n\t\t\tcallback = start;\n\t\t\tstart = null;\n\n\t\t} else if (!(start instanceof Date)) {\n\t\t\tif ((start !== null) && isFinite(start)) {\n\t\t\t\tstart = new Date(+start);\n\t\t\t} else {\n\t\t\t\tif ('object' === typeof startTS) {\n\t\t\t\t\tstartTS = /** @type{Timespan} */(start);\n\t\t\t\t}\n\t\t\t\tstart = null;\n\t\t\t}\n\t\t}\n\n\t\t// ensure end date\n\t\tvar endTS = null;\n\t\tif ('function' === typeof end) {\n\t\t\tcallback = end;\n\t\t\tend = null;\n\n\t\t} else if (!(end instanceof Date)) {\n\t\t\tif ((end !== null) && isFinite(end)) {\n\t\t\t\tend = new Date(+end);\n\t\t\t} else {\n\t\t\t\tif ('object' === typeof end) {\n\t\t\t\t\tendTS = /** @type{Timespan} */(end);\n\t\t\t\t}\n\t\t\t\tend = null;\n\t\t\t}\n\t\t}\n\n\t\t// must wait to interpret timespans until after resolving dates\n\t\tif (startTS) {\n\t\t\tstart = addToDate(startTS, end);\n\t\t}\n\t\tif (endTS) {\n\t\t\tend = addToDate(endTS, start);\n\t\t}\n\n\t\tif (!start && !end) {\n\t\t\t// used for unit testing\n\t\t\treturn new Timespan();\n\t\t}\n\n\t\tif (!callback) {\n\t\t\treturn populate(new Timespan(), /** @type{Date} */(start), /** @type{Date} */(end), /** @type{number} */(units), /** @type{number} */(max), /** @type{number} */(digits));\n\t\t}\n\n\t\t// base delay off units\n\t\tvar delay = getDelay(units),\n\t\t\ttimerId,\n\t\t\tfn = function() {\n\t\t\t\tcallback(\n\t\t\t\t\tpopulate(new Timespan(), /** @type{Date} */(start), /** @type{Date} */(end), /** @type{number} */(units), /** @type{number} */(max), /** @type{number} */(digits)),\n\t\t\t\t\ttimerId\n\t\t\t\t);\n\t\t\t};\n\n\t\tfn();\n\t\treturn (timerId = setInterval(fn, delay));\n\t}\n\n\t/**\n\t * @public\n\t * @const\n\t * @type {number}\n\t */\n\tcountdown.MILLISECONDS = MILLISECONDS;\n\n\t/**\n\t * @public\n\t * @const\n\t * @type {number}\n\t */\n\tcountdown.SECONDS = SECONDS;\n\n\t/**\n\t * @public\n\t * @const\n\t * @type {number}\n\t */\n\tcountdown.MINUTES = MINUTES;\n\n\t/**\n\t * @public\n\t * @const\n\t * @type {number}\n\t */\n\tcountdown.HOURS = HOURS;\n\n\t/**\n\t * @public\n\t * @const\n\t * @type {number}\n\t */\n\tcountdown.DAYS = DAYS;\n\n\t/**\n\t * @public\n\t * @const\n\t * @type {number}\n\t */\n\tcountdown.WEEKS = WEEKS;\n\n\t/**\n\t * @public\n\t * @const\n\t * @type {number}\n\t */\n\tcountdown.MONTHS = MONTHS;\n\n\t/**\n\t * @public\n\t * @const\n\t * @type {number}\n\t */\n\tcountdown.YEARS = YEARS;\n\n\t/**\n\t * @public\n\t * @const\n\t * @type {number}\n\t */\n\tcountdown.DECADES = DECADES;\n\n\t/**\n\t * @public\n\t * @const\n\t * @type {number}\n\t */\n\tcountdown.CENTURIES = CENTURIES;\n\n\t/**\n\t * @public\n\t * @const\n\t * @type {number}\n\t */\n\tcountdown.MILLENNIA = MILLENNIA;\n\n\t/**\n\t * @public\n\t * @const\n\t * @type {number}\n\t */\n\tcountdown.DEFAULTS = DEFAULTS;\n\n\t/**\n\t * @public\n\t * @const\n\t * @type {number}\n\t */\n\tcountdown.ALL = MILLENNIA|CENTURIES|DECADES|YEARS|MONTHS|WEEKS|DAYS|HOURS|MINUTES|SECONDS|MILLISECONDS;\n\n\t/**\n\t * Customize the format settings.\n\t * @public\n\t * @param {Object} format settings object\n\t */\n\tvar setFormat = countdown.setFormat = function(format) {\n\t\tif (!format) { return; }\n\n\t\tif ('singular' in format || 'plural' in format) {\n\t\t\tvar singular = format.singular || [];\n\t\t\tif (singular.split) {\n\t\t\t\tsingular = singular.split('|');\n\t\t\t}\n\t\t\tvar plural = format.plural || [];\n\t\t\tif (plural.split) {\n\t\t\t\tplural = plural.split('|');\n\t\t\t}\n\n\t\t\tfor (var i=LABEL_MILLISECONDS; i<=LABEL_MILLENNIA; i++) {\n\t\t\t\t// override any specified units\n\t\t\t\tLABELS_SINGLUAR[i] = singular[i] || LABELS_SINGLUAR[i];\n\t\t\t\tLABELS_PLURAL[i] = plural[i] || LABELS_PLURAL[i];\n\t\t\t}\n\t\t}\n\n\t\tif ('string' === typeof format.last) {\n\t\t\tLABEL_LAST = format.last;\n\t\t}\n\t\tif ('string' === typeof format.delim) {\n\t\t\tLABEL_DELIM = format.delim;\n\t\t}\n\t\tif ('string' === typeof format.empty) {\n\t\t\tLABEL_NOW = format.empty;\n\t\t}\n\t\tif ('function' === typeof format.formatNumber) {\n\t\t\tformatNumber = format.formatNumber;\n\t\t}\n\t\tif ('function' === typeof format.formatter) {\n\t\t\tformatter = format.formatter;\n\t\t}\n\t};\n\n\t/**\n\t * Revert to the default formatting.\n\t * @public\n\t */\n\tvar resetFormat = countdown.resetFormat = function() {\n\t\tLABELS_SINGLUAR = ' millisecond| second| minute| hour| day| week| month| year| decade| century| millennium'.split('|');\n\t\tLABELS_PLURAL = ' milliseconds| seconds| minutes| hours| days| weeks| months| years| decades| centuries| millennia'.split('|');\n\t\tLABEL_LAST = ' and ';\n\t\tLABEL_DELIM = ', ';\n\t\tLABEL_NOW = '';\n\t\tformatNumber = function(value) { return value; };\n\t\tformatter = plurality;\n\t};\n\n\t/**\n\t * Override the unit labels.\n\t * @public\n\t * @param {string|Array=} singular a pipe ('|') delimited list of singular unit name overrides\n\t * @param {string|Array=} plural a pipe ('|') delimited list of plural unit name overrides\n\t * @param {string=} last a delimiter before the last unit (default: ' and ')\n\t * @param {string=} delim a delimiter to use between all other units (default: ', ')\n\t * @param {string=} empty a label to use when all units are zero (default: '')\n\t * @param {function(number):string=} formatNumber a function which formats numbers as a string\n\t * @param {function(number,number):string=} formatter a function which formats a number/unit pair as a string\n\t * @deprecated since version 2.6.0\n\t */\n\tcountdown.setLabels = function(singular, plural, last, delim, empty, formatNumber, formatter) {\n\t\tsetFormat({\n\t\t\tsingular: singular,\n\t\t\tplural: plural,\n\t\t\tlast: last,\n\t\t\tdelim: delim,\n\t\t\tempty: empty,\n\t\t\tformatNumber: formatNumber,\n\t\t\tformatter: formatter\n\t\t});\n\t};\n\n\t/**\n\t * Revert to the default unit labels.\n\t * @public\n\t * @deprecated since version 2.6.0\n\t */\n\tcountdown.resetLabels = resetFormat;\n\n\tresetFormat();\n\n\tif (module && module.exports) {\n\t\tmodule.exports = countdown;\n\n\t} else if (typeof window.define === 'function' && typeof window.define.amd !== 'undefined') {\n\t\twindow.define('countdown', [], function() {\n\t\t\treturn countdown;\n\t\t});\n\t}\n\n\treturn countdown;\n\n})(module);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}