import { useState, useEffect } from 'react';

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);

    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }

    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var useTimer = function useTimer(count, onFinish) {
  var _useState = useState(true),
      _useState2 = _slicedToArray(_useState, 2),
      isActive = _useState2[0],
      setIsActive = _useState2[1];

  var _useState3 = useState({
    count: count,
    seconds: "",
    minutes: "",
    hours: "",
    days: ""
  }),
      _useState4 = _slicedToArray(_useState3, 2),
      counter = _useState4[0],
      setCounter = _useState4[1];

  useEffect(function () {
    var intervalId;

    if (isActive) {
      intervalId = setInterval(function () {
        if (counter.count >= 1) {
          setCounter(function (counter) {
            return _objectSpread2(_objectSpread2({}, counter), {}, {
              count: counter.count - 1
            });
          });
        } else {
          setIsActive(false);

          if (onFinish) {
            onFinish();
          }
        }

        var secondCounter = counter.count % 60;
        var minuteCounter = Math.floor(counter.count % 3600 / 60);
        var hourCounter = Math.floor(counter.count % (3600 * 24) / 3600);
        var daysCounter = Math.floor(counter.count / (3600 * 24));
        var computedSecond = String(secondCounter).length === 1 ? "0".concat(secondCounter) : secondCounter;
        var computedMinute = String(minuteCounter).length === 1 ? "0".concat(minuteCounter) : minuteCounter;
        var computedHour = String(hourCounter).length === 1 ? "0".concat(hourCounter) : hourCounter;
        var computedDay = String(daysCounter).length === 1 ? "0".concat(daysCounter) : daysCounter;
        setCounter(function (counter) {
          return _objectSpread2(_objectSpread2({}, counter), {}, {
            seconds: computedSecond,
            minutes: computedMinute,
            hours: computedHour,
            days: computedDay
          });
        });
      }, 1000);
    }

    return function () {
      return clearInterval(intervalId);
    };
  }, [isActive, counter.count, onFinish]);

  function pause() {
    setIsActive(false);
  }

  function resume() {
    setIsActive(true);
  }

  function reset() {
    setCounter({
      count: count,
      seconds: "00",
      minutes: "00",
      hours: "00",
      days: "00"
    });
    setIsActive(true);
  }

  return {
    isActive: isActive,
    counter: counter.count,
    seconds: counter.seconds,
    minutes: counter.minutes,
    hours: counter.hours,
    days: counter.days,
    pause: pause,
    resume: resume,
    reset: reset
  };
};

export { useTimer };
//# sourceMappingURL=index.es.js.map
